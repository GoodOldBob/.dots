[user]
	name = Ethan Chan
	email = metakirby5@gmail.com
[core]
	excludesfile = ~/.config/git/ignore          # global ignore
	whitespace = space-before-tab,trailing-space # error on bad whitespace
[push]
	default = upstream         # push to upstream
[pull]
	rebase = true              # rebase instead of merge on pull
[merge]
	defaultToUpstream = true   # merge with upstream by default
	log = true                 # summary on merge
[rebase]
	autosquash = true          # reposition fixups
[branch]
	autosetuprebase = always   # rebase on pull, not merge
[apply]
 	whitespace = fix           # fix whitespace when applying patches
[diff]
	renames = copies           # detect renames and copies
	compactionHeuristic = true # improve diffs
[diff "bin"]
	textconv = hexdump -v -C   # diff binaries by hexdump
[grep]
	lineNumber = true          # show line number in output
	fullName = true            # filenames are relative to VCS root
[rerere]
	enabled = true             # remember past conflict resolutions
[log]
	date = local               # use local time
	decorate = short           # show refs
[color]
	ui = auto
	diff = auto
	status = auto
	branch = auto
[alias]
	# misc
	i = init
	cl = clone --recursive
	co = checkout
	ci = commit
	cp = cherry-pick
	t = tag
	r = reset

	# status
	s  = status --short
	st = status

	# branch
	b = branch -vv
	ba = branch -vv --all

	# diff
	d   = diff --color-words
	dl  = diff
	ds  = diff --name-status
	dc  = diff --color-words --cached
	dcl = diff --cached
	dcs  = diff --name-status --cached

	# add
	a  = add
	aa = add --all
	ai = add --interactive
	ap = add --patch

	# stash
	su = stash save
	sl = stash list --pretty=format:'%C(yellow)%gd %C(green)%ci %C(reset)%s%C(magenta)%d'
	so = stash show --patch --color-words
	sp = stash pop
	sa = stash apply
	sd = stash drop

	# rebase
	rb = rebase
	rbi = rebase --interactive
	rbc = rebase --continue

	# log
	l   = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=short
	lr  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=relative
	lp  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d%n' --date=short --patch --color-words
	ls  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=short --numstat
	lg  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=short --graph
	lb  = log --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B'
	lbp = log --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --patch --color-words
	lbs = log --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --numstat
	lbg = log --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --graph

	# show
	o  = show --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --color-words
	os = show --pretty=format:'%C(yellow)%h %C(green)%ci %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --numstat

	# new commands
	exec = "!exec "
	root = rev-parse --show-toplevel
	fixup = commit --fixup
	amend = commit --amend
	squash = "!f(){(git rebase --interactive HEAD~$1)};f"
	find = !git ls-files | grep -iI
	f = find
	g = grep -niI --heading -C 5 --untracked
	rg = !git g
	spull = "!git stash save; git pull; git stash pop"
	upush = push -u origin HEAD
	aliases = !git config -l | grep alias | cut -c 7-

	# fzf
	z   = "!(git ls-files | fzf)"
	zs  = "!(c='x=\"$(awk \"{print\\$2}\" <<< {})\"; (pygmentize \"$x\" || less \"$x\") 2>/dev/null'; git -c color.status=always s | fzf --ansi --multi --preview \"$c\" --bind \"ctrl-o:execute[$c | less -R >&2]\" | awk '{print$2}')"
	zl  = "!(c='git o $(printf \"%s\n\" {} | cut -d\\  -f1)'; git l | fzf --ansi --no-sort --multi --preview \"$c\" --bind \"ctrl-o:execute-multi[$c | less -R >&2]\" | cut -d\\  -f1)"
	zb  = "!(c='git lbg $(awk \"{print\\$1}\" <<< {})'; git -c color.branch=always ba | cut -c3- | fzf --ansi --multi --preview \"$c\" --bind \"ctrl-o:execute[$c | less -R >&2]\" | awk '{print$1}')"
	zso = "!(c='git so $(cut -d\\  -f1 <<< {})'; git sl | fzf --ansi --no-sort --multi --preview \"$c\" --bind \"ctrl-o:execute[$c | less -R >&2]\" | cut -d\\  -f1)"
	zd  = "!(c='p=\"$(git d  {})\"; [ \"$p\" ] && echo \"$p\" || less {}'; git st --porcelain | awk '/^.[^ ]/{print$2}'  | fzf --ansi --multi --preview \"$c\" --bind \"ctrl-o:execute-multi[$c | less -R >&2]\")"
	zdc = "!(c='p=\"$(git dc {})\"; [ \"$p\" ] && echo \"$p\" || less {}'; git st --porcelain | awk '/^[^ ?]./{print$2}' | fzf --ansi --multi --preview \"$c\" --bind \"ctrl-o:execute-multi[$c | less -R >&2]\")"
	zg  = "!f(){(c=\"git -c color.grep=always g $@ -- {}\"; git g -l \"$@\" | fzf --multi --preview \"$c\" --bind \"ctrl-o:execute-multi[$c | less -R >&2]\")};f"
	zco = "!f(){(local x=$(git zb);  [ \"$x\" ] && git co $x \"$@\")};f"
	zci = "!f(){(local x=$(git zl);  [ \"$x\" ] && git co $x \"$@\")};f"
	zcd = "!f(){(local x=$(git zl);  [ \"$x\" ] && git d $x \"$@\")};f"
	zo  = "!f(){(local x=$(git zl);  [ \"$x\" ] && git o $x \"$@\" | less -R)};f"
	za  = "!f(){(local x=$(git zd);  [ \"$x\" ] && git a $x \"$@\")};f"
	zr  = "!f(){(local x=$(git zdc); [ \"$x\" ] && git r $x \"$@\")};f"
	zsp = "!f(){(local x=$(git zso); [ \"$x\" ] && git sp $x \"$@\")};f"
	zsa = "!f(){(local x=$(git zso); [ \"$x\" ] && git sa $x \"$@\")};f"
	zsd = "!f(){(local x=$(git zso); [ \"$x\" ] && git sd $x \"$@\")};f"
