[user]
	name = Ethan Chan
	email = metakirby5@gmail.com
[core]
	excludesfile = ~/.config/git/ignore          # global ignore
	whitespace = space-before-tab,trailing-space # error on bad whitespace
[push]
	default = upstream       # push to upstream
[merge]
	defaultToUpstream = true # merge with upstream by default
	log = true               # summary on merge
[rebase]
	autosquash = true        # reposition fixups
[branch]
	autosetuprebase = always # rebase on pull, not merge
[apply]
 	whitespace = fix         # fix whitespace when applying patches
[diff]
	renames = copies         # detect renames and copies
[diff "bin"]
	textconv = hexdump -v -C # diff binaries by hexdump
[grep]
	lineNumber = true        # show line number in output
	fullName = true          # filenames are relative to VCS root
[rerere]
	enabled = true           # remember past conflict resolutions
[log]
	date = local             # use local time
	decorate = short         # show refs
[color]
	ui = auto
	diff = auto
	status = auto
	branch = auto
[alias]
	# misc
	cl = clone --recursive
	co = checkout
	ci = commit
	t = tag

	# status
	s  = status --short
	st = status

	# branch
	b = branch
	ba = branch --all

	# diff
	d   = diff --color-words
	dl  = diff
	dc  = diff --color-words --cached
	dlc = diff --cached

	# add
	a  = add
	aa = add --all
	ai = add --interactive
	ap = add --patch

	# reset
	r  = reset HEAD
	rs = reset --soft HEAD

	# stash
	su = stash save
	sl = stash list
	ss = stash show --patch --color-words
	sp = stash pop
	sa = stash apply
	sd = stash drop

	# log
	l   = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=short
	lr  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=relative
	lp  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d%n' --date=short --patch --color-words
	ls  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=short --numstat
	lg  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an %C(reset)%s%C(magenta)%d' --date=short --graph
	lb  = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --date=short
	lbp = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --date=short --patch --color-words
	lbs = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --date=short --numstat
	lbg = log --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --date=short --graph

	# show
	o  = show --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --date=short --color-words
	os = show --pretty=format:'%C(yellow)%h %C(green)%cd %C(blue)%an%C(magenta)%d%+n%w(0, 4, 4)%B' --date=short --numstat

	# new commands
	fixup = commit --fixup
	amend = commit --amend
	squash = "!f() { git rebase --interactive HEAD~$1; }; f"
	find = !git ls-files | grep
	rgrep = "!f(){(cd \"$(git rev-parse --show-toplevel)\" && git grep \"$@\")};f"
	spull = "!git stash save; git pull; git stash pop"
	aliases = !git config -l | grep alias | cut -c 7-

	# fzf
	zl  = "!git l | fzf-tmux --ansi --with-nth=2.. --no-sort --multi --preview 'git o $(cut -d\\  -f1 <<< {}) | head -'$LINES | cut -d\\  -f1"
	zb  = "!git -c color.branch=always ba | cut -c3- | fzf-tmux --ansi --multi --preview 'git lbg $(awk \"{print\\$1}\" <<< {}) | head -'$LINES | awk '{print$1}'"
	zs  = "!git sl | fzf-tmux --multi --preview 'git ss $(cut -d: -f1 <<< {}) | head -'$LINES | cut -d: -f1"
	zd  = "!git -c color.status=always s | fzf --ansi -n2.. --multi --preview 'git d $(cut -c4- <<< {}) | head -'$LINES | cut -c4-"
	zdc = "!git -c color.status=always s | fzf --ansi -n2.. --multi --preview 'git dc $(cut -c4- <<< {}) | head -'$LINES | cut -c4-"
	zco = "!(x=$(git zb);  [ \"$x\" ] && git co $x)"
	zo  = "!(x=$(git zl);  [ \"$x\" ] && git o $x | less -R)"
	za  = "!(x=$(git zd);  [ \"$x\" ] && git a $x)"
	zr  = "!(x=$(git zdc); [ \"$x\" ] && git r $x)"
	zsp = "!(x=$(git zs);  [ \"$x\" ] && git sp $x)"
	zsa = "!(x=$(git zs);  [ \"$x\" ] && git sa $x)"
	zsd = "!(x=$(git zs);  [ \"$x\" ] && git sd $x)"
