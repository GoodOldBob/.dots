#!/usr/bin/env python
# ./emit | lemonbar -bd -g 3120x70+40+20 -u 5 -f "Calibri-9" -f "M+ 1p-9" | sh
import logging
import i3ipc
from colorlog import ColoredFormatter
from sys import stdout, stderr, exit
from threading import Thread
from time import sleep
import lemonpyblocks as lpb
from lemonpyblocks import clock as lpbclock, i3 as lpbi3

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


class Bar:
    def __init__(self):
        i3_conn = i3ipc.Connection()

        self.datetime_updater = lpbclock.DatetimeUpdater([self])
        self.workspace_updater = lpbi3.WorkspaceUpdater(i3_conn, [self])
        self.window_updater = lpbi3.WindowUpdater(i3_conn, [self])

        self.threads = [
            Thread(target=self.datetime_updater.main),
            Thread(target=i3_conn.main),
        ]

    def start(self):
        for thread in self.threads:
            thread.daemon = True
            thread.start()

        self.output()

    def notify(self):
        self.output()

    def output(self):
        bar = lpb.colors.S_TRANSPARENT

        window_update = self.window_updater.query()
        if window_update:
            bar += '%{l}' + lpb.colors.S_NORMAL + '  ' + \
                window_update + '  ' + lpb.colors.S_TRANSPARENT

        workspace_update = self.workspace_updater.query()
        if workspace_update:
            bar += '%{c}' + lpb.colors.S_NORMAL + '  ' + \
                workspace_update + '  ' + lpb.colors.S_TRANSPARENT

        datetime_update = self.datetime_updater.query()
        if datetime_update:
            bar += '%{r}' + lpb.colors.S_NORMAL + '  ' + \
                datetime_update + '  ' + lpb.colors.S_TRANSPARENT

        print(bar)

        # Need this to fix buffering problem
        stdout.flush()


if __name__ == '__main__':
    # Set up logging
    lbp_logger = logging.getLogger(lpb.__name__)
    ch = logging.StreamHandler(stderr)
    ch.setLevel(logging.DEBUG)
    ch.setFormatter(ColoredFormatter(
        '[%(asctime)s] %(log_color)s%(message)s'))
    logger.addHandler(ch)
    lbp_logger.addHandler(ch)

    Bar().start()
    try:
        while True:
            sleep(1)
    except KeyboardInterrupt:
            exit()

