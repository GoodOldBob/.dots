#!/usr/bin/env python
# ./emit | lemonbar -bd -g 3120x+40+40 -u 2 -f "Calibri-10" -f "M+ 1p-10" | sh
import logging
import i3ipc
import blocks
import constants
from colorlog import ColoredFormatter
from sys import stdout, stderr, exit
from threading import Thread
from time import sleep

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


class Bar:
    def __init__(self):
        i3_conn = i3ipc.Connection()

        self.stats_updater = blocks.StatsBlock([self])
        self.workspace_updater = blocks.WorkspaceBlock(i3_conn, [self])
        self.window_updater = blocks.TitleBlock(i3_conn, [self])

        self.threads = [
            Thread(target=self.stats_updater.main),
            Thread(target=i3_conn.main),
        ]

    def start(self):
        for thread in self.threads:
            thread.daemon = True
            thread.start()

        self.output()

    def notify(self):
        self.output()

    def output(self):
        bar = constants.S_NORMAL

        window_update = self.window_updater.query()
        if window_update:
            bar += '%{l}' + constants.S_NORMAL + '  ' + \
                window_update + '  ' + constants.S_NORMAL

        workspace_update = self.workspace_updater.query()
        if workspace_update:
            bar += '%{c}' + constants.S_NORMAL + \
                workspace_update + constants.S_NORMAL

        stats_update = self.stats_updater.query()
        if stats_update:
            bar += '%{r}' + constants.S_NORMAL + '  ' + \
                stats_update + '  ' + constants.S_NORMAL

        print(bar)

        # Need this to fix buffering problem
        stdout.flush()


if __name__ == '__main__':
    # Set up logging
    ch = logging.StreamHandler(stderr)
    ch.setLevel(logging.DEBUG)
    ch.setFormatter(ColoredFormatter(
        '[%(asctime)s] %(log_color)s%(message)s'))

    for l in [logger, logging.getLogger(blocks.__name__)]:
        l.addHandler(ch)

    Bar().start()
    try:
        while True:
            sleep(1)
    except KeyboardInterrupt:
            exit()

